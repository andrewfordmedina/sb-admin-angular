{"version":3,"file":"ngx-tagify.js","sources":["../../projects/ngx-tagify/src/lib/tagify.service.ts","../../projects/ngx-tagify/src/lib/tagify.component.ts","../../projects/ngx-tagify/src/lib/tagify.module.ts","../../../projects/ngx-tagify/src/public-api.ts","../../../projects/ngx-tagify/src/ngx-tagify.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport Tagify from '@yaireo/tagify';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagifyService {\n\n  private tagifyMap = new Map<string, Tagify>();\n\n  constructor() { }\n\n  /**\n   * Adds a tagify instance, so it is available via service. Used internally.\n   */\n  add(name: string, tagify: Tagify): void {\n    if (this.tagifyMap.get(name)) {\n      console.warn(`There already exists a tagify instance with name ${name}!`);\n      return;\n    }\n    this.tagifyMap.set(name, tagify);\n  }\n\n  /**\n   * Get tagify instance for full access to tagify API.\n   */\n  get(name: string): Tagify {\n    return this.tagifyMap.get(name);\n  }\n\n  /**\n   * Removes a tagify instance from service. Used internally.\n   */\n  remove(name: string): void {\n    this.tagifyMap.delete(name);\n  }\n\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter, forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { asyncScheduler, BehaviorSubject, fromEvent, merge, Observable, Subject } from 'rxjs';\nimport { takeUntil, throttleTime } from 'rxjs/operators';\nimport Tagify, { TagData, TagifySettings } from '@yaireo/tagify';\nimport { TagifyService } from './tagify.service';\n\n@Component({\n  selector: 'tagify',\n  template: `<input [ngClass]=\"inputClassValue\" #inputRef/>\n    <span style=\"display: none\"><ng-content></ng-content></span>`,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagifyComponent),\n    multi: true\n  }]\n})\nexport class TagifyComponent implements AfterViewInit, ControlValueAccessor, OnDestroy {\n\n  private valueData: string|TagData[];\n  private valueType = 'undefined';\n  private onChange: any = Function.prototype;\n  private onTouched: any = Function.prototype;\n\n  private unsubscribe$ = new Subject<void>();\n  private value$ = new BehaviorSubject<string|TagData[]>(null);\n  private tagify: Tagify;\n  private skip = false;\n\n  inputClassValue = '';\n  readonlyValue = false;\n\n  @ViewChild('inputRef', {static: true}) inputRef: ElementRef<HTMLInputElement>;\n\n  @Input() settings: TagifySettings = {};\n  @Input() name = '';\n  @Input() whitelist: Observable<string[]|TagData[]>;\n  @Input() set inputClass(v: string) {\n    this.setTagsClass(v);\n    this.inputClassValue = v;\n  }\n  @Input() set readonly(v: boolean) {\n    this.readonlyValue = !!v;\n    this.setReadonly();\n  }\n\n  get value(): string|TagData[] {\n    return this.valueData;\n  }\n\n  set value(v: string|TagData[]) {\n    if (v !== this.valueData) {\n      this.valueData = v;\n      this.onChange(v);\n    }\n  }\n\n  @Output() add = new EventEmitter();\n  @Output() remove = new EventEmitter();\n  @Output() tInput = new EventEmitter<string>();\n\n  constructor(\n    private tagifyService: TagifyService,\n    private element: ElementRef<HTMLElement>\n  ) { }\n\n  ngAfterViewInit(): void {\n    this.settings.callbacks = this.settings.callbacks || {};\n\n    if (!this.settings.callbacks.hasOwnProperty('add')) {\n      this.settings.callbacks.add = () => this.add.emit({\n        tags: this.tagify.value,\n        added: this.tagify.value[this.tagify.value.length - 1]\n      });\n    }\n\n    if (!this.settings.callbacks.hasOwnProperty('remove')) {\n      this.settings.callbacks.remove = () => this.remove.emit(this.tagify.value);\n    }\n\n    const innerText = this.element.nativeElement.textContent;\n\n    this.tagify = new Tagify(this.inputRef.nativeElement, this.settings);\n\n    // add to service if name is provided\n    if (this.name.length) {\n      this.tagifyService.add(this.name, this.tagify);\n    }\n\n    this.setReadonly();\n\n    // if there is some text inside component, load this value and skip first change check\n    if (innerText.length) {\n      this.tagify.loadOriginalValues(innerText);\n      this.skip = true;\n      setTimeout(() => {\n        this.setValue();\n      });\n    }\n\n    // listen to value changes from outside\n    this.value$\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(tags => {\n\n        if (!tags) { return; }\n\n        if (this.skip) {\n          this.skip = false;\n          return;\n        }\n\n        if (this.valueType === 'undefined') {\n          this.valueType = typeof tags;\n        }\n\n        // if string is passed, e.g. via reactive forms\n        if (typeof tags === 'string') {\n          this.tagify.loadOriginalValues(tags);\n          setTimeout(() => {\n            this.setValue();\n          });\n          return;\n        }\n\n        // add all tags (already existing tags will be skipped\n        this.tagify.addTags(tags, false, true);\n\n        // remove all tags that are not part of value anymore\n        this.tagify.value.forEach(v => {\n          if (!tags.find(t => t.value === v.value)) {\n            // somehow removeTags() with string parameter doesn't always find the tag element\n            // this is a workaround for finding the right tag element\n            const tagElm = this.tagify.getTagElms().find(el => el.attributes.getNamedItem('value').textContent === v.value);\n            this.tagify.removeTags(tagElm);\n          }\n        });\n\n      });\n\n    // listen to tagify events\n    this.tagify.on('input', e => {\n      this.tInput.emit(e.detail.value);\n      if (this.valueType === 'string' && this.tagify.settings.mode === 'mix') {\n        this.value = this.tagify.getMixedTagsAsString();\n      }\n    });\n\n    merge(\n      fromEvent(this.tagify, 'add'),\n      fromEvent(this.tagify, 'remove')\n    )\n      .pipe(\n        // throttle used to reduce number of value changes when adding/removing a bunch of tags\n        throttleTime(0, asyncScheduler, { leading: false, trailing: true }),\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe(() => {\n        this.setValue();\n      });\n\n    // listen to suggestions updates\n    if (this.whitelist) {\n      this.whitelist\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(list => {\n          this.tagify.settings.whitelist = list;\n        });\n    }\n  }\n\n  writeValue(tags: string|TagData[]) {\n    this.value$.next(tags);\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  private setValue(): void {\n    if (this.valueType === 'string') {\n      this.value = this.tagify.DOM.originalInput.value;\n    } else {\n      this.value = this.tagify.value.slice();\n    }\n  }\n\n  /**\n   * Tagify creates a `tags` element to which the classes of the `input` element are applied.\n   * Changes of `inputClass` are applied automatically to the `input` element, but have to be\n   * manually applied to the `tags` element.\n   */\n  private setTagsClass(v: string): void {\n    const tagsElement = this.element.nativeElement.querySelector('tags');\n    if (tagsElement) {\n      tagsElement.classList.remove(...this.inputClassValue.split(/\\s+/));\n      tagsElement.classList.add(...v.split(/\\s+/));\n    }\n  }\n\n  private setReadonly() {\n    if (this.tagify) {\n      this.tagify.setReadonly(this.readonlyValue);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n\n    this.tagify.destroy();\n\n    if (this.name.length) {\n      this.tagifyService.remove(this.name);\n    }\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TagifyComponent } from './tagify.component';\nimport { TagifyService } from './tagify.service';\n\n@NgModule({\n  declarations: [ TagifyComponent ],\n  imports: [ CommonModule ],\n  exports: [ TagifyComponent ],\n  providers: [ TagifyService ]\n})\nexport class TagifyModule {\n  static forRoot(): ModuleWithProviders<TagifyModule> {\n    return {\n      ngModule: TagifyModule,\n      providers: [ TagifyService ]\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-tagify\n */\nimport Tagify, { TagData, TagifySettings } from '@yaireo/tagify';\n\nexport { Tagify, TagData, TagifySettings };\nexport * from './lib/tagify.service';\nexport * from './lib/tagify.component';\nexport * from './lib/tagify.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}