import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class TagifyService {
    constructor() {
        this.tagifyMap = new Map();
    }
    /**
     * Adds a tagify instance, so it is available via service. Used internally.
     */
    add(name, tagify) {
        if (this.tagifyMap.get(name)) {
            console.warn(`There already exists a tagify instance with name ${name}!`);
            return;
        }
        this.tagifyMap.set(name, tagify);
    }
    /**
     * Get tagify instance for full access to tagify API.
     */
    get(name) {
        return this.tagifyMap.get(name);
    }
    /**
     * Removes a tagify instance from service. Used internally.
     */
    remove(name) {
        this.tagifyMap.delete(name);
    }
}
TagifyService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TagifyService_Factory() { return new TagifyService(); }, token: TagifyService, providedIn: "root" });
TagifyService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
TagifyService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnaWZ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRhZ2lmeS9zcmMvIiwic291cmNlcyI6WyJsaWIvdGFnaWZ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFNM0MsTUFBTSxPQUFPLGFBQWE7SUFJeEI7UUFGUSxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7SUFFOUIsQ0FBQztJQUVqQjs7T0FFRztJQUNILEdBQUcsQ0FBQyxJQUFZLEVBQUUsTUFBYztRQUM5QixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVCLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0RBQW9ELElBQUksR0FBRyxDQUFDLENBQUM7WUFDMUUsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7T0FFRztJQUNILEdBQUcsQ0FBQyxJQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsSUFBWTtRQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7O1lBaENGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBUYWdpZnkgZnJvbSAnQHlhaXJlby90YWdpZnknO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUYWdpZnlTZXJ2aWNlIHtcblxuICBwcml2YXRlIHRhZ2lmeU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBUYWdpZnk+KCk7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvKipcbiAgICogQWRkcyBhIHRhZ2lmeSBpbnN0YW5jZSwgc28gaXQgaXMgYXZhaWxhYmxlIHZpYSBzZXJ2aWNlLiBVc2VkIGludGVybmFsbHkuXG4gICAqL1xuICBhZGQobmFtZTogc3RyaW5nLCB0YWdpZnk6IFRhZ2lmeSk6IHZvaWQge1xuICAgIGlmICh0aGlzLnRhZ2lmeU1hcC5nZXQobmFtZSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgVGhlcmUgYWxyZWFkeSBleGlzdHMgYSB0YWdpZnkgaW5zdGFuY2Ugd2l0aCBuYW1lICR7bmFtZX0hYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudGFnaWZ5TWFwLnNldChuYW1lLCB0YWdpZnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0YWdpZnkgaW5zdGFuY2UgZm9yIGZ1bGwgYWNjZXNzIHRvIHRhZ2lmeSBBUEkuXG4gICAqL1xuICBnZXQobmFtZTogc3RyaW5nKTogVGFnaWZ5IHtcbiAgICByZXR1cm4gdGhpcy50YWdpZnlNYXAuZ2V0KG5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSB0YWdpZnkgaW5zdGFuY2UgZnJvbSBzZXJ2aWNlLiBVc2VkIGludGVybmFsbHkuXG4gICAqL1xuICByZW1vdmUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy50YWdpZnlNYXAuZGVsZXRlKG5hbWUpO1xuICB9XG5cbn1cbiJdfQ==