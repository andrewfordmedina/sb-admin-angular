{"version":3,"file":"tagify.component.d.ts","sources":["tagify.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { TagData, TagifySettings } from '@yaireo/tagify';\r\nimport { TagifyService } from './tagify.service';\r\nexport declare class TagifyComponent implements AfterViewInit, ControlValueAccessor, OnDestroy {\r\n    private tagifyService;\r\n    private element;\r\n    private valueData;\r\n    private valueType;\r\n    private onChange;\r\n    private onTouched;\r\n    private unsubscribe$;\r\n    private value$;\r\n    private tagify;\r\n    private skip;\r\n    inputClassValue: string;\r\n    readonlyValue: boolean;\r\n    inputRef: ElementRef<HTMLInputElement>;\r\n    settings: TagifySettings;\r\n    name: string;\r\n    whitelist: Observable<string[] | TagData[]>;\r\n    set inputClass(v: string);\r\n    set readonly(v: boolean);\r\n    get value(): string | TagData[];\r\n    set value(v: string | TagData[]);\r\n    add: EventEmitter<any>;\r\n    remove: EventEmitter<any>;\r\n    tInput: EventEmitter<string>;\r\n    constructor(tagifyService: TagifyService, element: ElementRef<HTMLElement>);\r\n    ngAfterViewInit(): void;\r\n    writeValue(tags: string | TagData[]): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    private setValue;\r\n    /**\r\n     * Tagify creates a `tags` element to which the classes of the `input` element are applied.\r\n     * Changes of `inputClass` are applied automatically to the `input` element, but have to be\r\n     * manually applied to the `tags` element.\r\n     */\r\n    private setTagsClass;\r\n    private setReadonly;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}